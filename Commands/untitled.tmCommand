<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/python
#
#       beforeRunningCommand: nop
#              fallbackInput: none
#                      input: selection
#              keyEquivalent: ^~@t
#                       name: Normalize Markdown Table
#                     output: replaceSelectedText
#                      scope: text.html.markdown
#                       uuid: F26F1838-E653-4F41-8793-F44400669C21
#

import sys

def just(string, type, n):
    "Justify a string to length n according to type."
    
    string = unicode(string, 'utf-8')
    if type == '::':
        return string.center(n)
    elif type == '-:':
        return string.rjust(n)
    elif type == ':-':
        return string.ljust(n)
    else:
        return string


def normtable(text):
    "Aligns the vertical bars in a text table."
    
    # Start by turning the text into a list of lines.
    lines = text.splitlines()
    rows = len(lines)
    
    # Figure out the cell formatting.
    # First, find the formatting line.
    for i in range(rows):
        if set(lines[i]).issubset('|:.-'):
            formatline = lines[i]
            formatrow = i
            break
    
    # Delete the formatting line from the content.
    del lines[formatrow]
    
    # Determine how each column is to be justified. 
    formatline = formatline.strip('| ')
    fstrings = formatline.split('|')
    justify = []
    for cell in fstrings:
        ends = cell[0] + cell[-1]
        if ends == '::':
            justify.append('::')
        elif ends == '-:':
            justify.append('-:')
        else:
            justify.append(':-')
    
    # Assume the number of columns in the format line is the number
    # for the entire table.
    columns = len(justify)
    
    # Extract the content into a .
    content = []
    for line in lines:
        line = line.strip('| ')
        cells = line.split('|')
        # Put exactly one space at each end as "bumpers."
        linecontent = [ ' ' + x.strip() + ' ' for x in cells ]
        content.append(linecontent)
    
    # Append cells to rows that don't have enough.
    rows = len(content)
    for i in range(rows):
        while len(content[i]) &lt; columns:
            content[i].append('')
    
    # Get the width of the content in each column. The minimum width will
    # be 2, because that's the shortest length of a formatting string and
    # because that matches an empty column with "bumper" spaces.
    widths = [2] * columns
    for row in content:
        for i in range(columns):
            widths[i] = max(len(unicode(row[i], 'utf-8')), widths[i])
    
    # Add whitespace to make all the columns the same width and 
    formatted = []
    for row in content:
        formatted.append('|' + '|'.join([ just(s, t, n) for (s, t, n) in zip(row, justify, widths) ]) + '|')
    
    # Recreate the format line with the appropriate column widths.
    formatline = '|' + '|'.join([ s[0] + '-'*(n-2) + s[-1] for (s, n) in zip(justify, widths) ]) + '|'
    
    # Insert the formatline back into the table.
    formatted.insert(formatrow, formatline)
    
    # Return the formatted table.
    return '\n'.join(formatted)


# Read the input, process, and print.
unformatted = sys.stdin.read()   
print normtable(unformatted).encode('utf-8')
</string>
	<key>input</key>
	<string>selection</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>name</key>
	<string>Tabs to Gnuplot Table.tmCommand</string>
	<key>outputCaret</key>
	<string>afterOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>replaceInput</string>
	<key>scope</key>
	<string>text.html.markdown markup.list</string>
	<key>uuid</key>
	<string>1F2E4C95-26EA-45F3-A801-D4E191D8448D</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
